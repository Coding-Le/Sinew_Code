首先进入到当前的文件夹，执行make指令

然后输入 ./sinew就能够执行程序了

 

接下来就是输入指令了，你就可以看到对应的提示信息，数字1代表实现insert_file的功能，

数字2代表实现输出目录的功能，数字3代表实现查找的功能，如果想要退出，输入0

 

输入了1，会显示相应的提示信息，要求输入想要实现序列化的文件的名称，这个时候用户可以

直接copy屏幕上的nobench_data.json（默认文件，大约10w条记录），也可以是nobench_data_extra.json(10条记录)

或者用户可以自己利用nobench生成一些记录，但是需要给出文件的路径+文件名称，

不然fopen可能打不开。

 

输入完nobench_data.json之后，按下回车，程序就开始进行序列化了，

序列化完成之后会自动进行反序列化，整个过程大约耗时1min左右。

输出对应结果，序列化后的文件保存在insert_to_binary文件夹中，

没有序列化但是转变成为论文中要求的格式的文件保存在insert to pdf form文件夹中，

从insert_to_binary文件反序列化得到的文件保存在insert_back_to_json文件夹中，

可以在相应目录下看到。

 

输入数字编号2，就可以实现输出目录的功能，我们同样可以

在catalog_for_user文件中查看输出的目录。

 

输入数字3，我们就可以进行查找，屏幕会给出提示信息，用户必须要输入find A = B这样的命令

才能够进行查询，A是属性名，B是属性的值：比如输入find bool = true

 

按下回车，屏幕上就会不断出现相对应的json记录，像find bool = true这样的查询大约

能够查询到2w条记录，整个过程大约花费5秒，同样的，你可以在find_result文件夹中查看

搜索到的结果

 

接下来你可以重新输入1对另外一个文件进行序列化，循环往复，

直到接收到0的退出信号或者用户操作不当造成的错误异常，程序才会退出
